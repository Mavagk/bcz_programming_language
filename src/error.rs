use std::{fmt::Display, io};

use crate::token::{OperatorSymbol, Separator};

pub enum Error {
	InvalidShortArgument(String),
	InvalidLongArgument(String),
	NoOptionContinuation,
	CouldNotOpenFile(io::Error),
	CouldNotReadLine,
	FeatureNotYetImplemented(String),
	InvalidTokenStartChar(char),
	InvalidNumericalLiteralBase(char),
	InvalidDigitForBase(char, u8),
	NumericalLiteralTooLarge,
	InvalidKeyword(String),
	InvalidOperator(String),
	TooManyOpenParentheses,
	TooManyCloseParentheses,
	BlankExpression,
	ParenthesisMismatch(Separator, Separator),
	NoOperatorBase,
	BinaryOperatorNotUsedOnExpressions,
	TernaryOperatorNotUsedOnExpressions,
	OperatorUsedOnNothing,
	InvalidPrefixOperatorSymbol(OperatorSymbol),
	InvalidInfixOperatorSymbol(OperatorSymbol),
	InvalidTernaryOperator,
	FunctionParametersWithoutBody,
	UnterminatedCharLiteral,
	EmptyCharLiteral,
	NothingEscaped,
	InvalidEscapeSequence(String),
	MultipleCharsInCharLiteral,
	UnterminatedStringLiteral,
	MetadataItemWithoutChildNode,
	GlobalAugmentedOperator,
	DiscardedGlobalFunctionCall,
	GlobalAssignmentToNonIdentifier,
	GlobalVariableConflict(String),
	ExpectedIdentifier,
	InvalidDependency,
	TooManyFunctionParameters,
	GlobalLValueAssignment,
	LValueFunctionCall,
	LValueFunctionDefinition,
	MultipleEntryPoints,
	TooManyFunctionArguments,
	InvalidTypeWidth,
	UnableToWriteObject,
	CouldNotGetTarget(String),
	InvalidArchitectureBitWidth(u128),
	UnableToEmitObjectFile(String),
	InvalidLValue,
	VoidParameter,
	DivisionByZero,
	ModuloByZero,
	NullPointerDereference,
	InvalidBuiltInFunctionArgumentCount,
	ConstValueRequired,
	UnmatchedTernary,
	KeywordWithTwoChildren,
	GlobalOperatorNotConstEvaluated,
	NotUsedInsideLoop,
	InvalidExport,
	UnterminatedBlockComment,
	ShouldNotHaveChild,
	InvalidSystemConstant,
	OnlyUsableInStandardLibrary,
	InvalidFilepath,
	UnsupportedCPU(String),
	UnsupportedOS(String),
	InvalidTargetTriplet(String),
}

impl Display for Error {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Self::InvalidShortArgument(arg) => write!(f, "Invalid short argument \"{}\"", arg),
			Self::InvalidLongArgument(arg) => write!(f, "Invalid long argument \"{}\"", arg),
			Self::NoOptionContinuation => write!(f, "No option continuation"),
			Self::CouldNotOpenFile(error) => write!(f, "Could not open file: {error}"),
			Self::CouldNotReadLine => write!(f, "Could not read line"),
			Self::FeatureNotYetImplemented(feature) => write!(f, "{feature} not yet implemented"),
			Self::InvalidTokenStartChar(c) => write!(f, "Invalid token start character '{c}'"),
			Self::InvalidNumericalLiteralBase(c) => write!(f, "Invalid numerical literal base \"0{c}\""),
			Self::InvalidDigitForBase(c, base) => write!(f, "Invalid digit '{c}' for base {base}"),
			Self::NumericalLiteralTooLarge => write!(f, "Numerical literal too large"),
			Self::InvalidKeyword(keyword) => write!(f, "Invalid keyword \"{keyword}\""),
			Self::InvalidOperator(operator) => write!(f, "Invalid operator \"{operator}\""),
			Self::TooManyCloseParentheses => write!(f, "Too many close parentheses"),
			Self::TooManyOpenParentheses => write!(f, "Too many open parentheses"),
			Self::BlankExpression => write!(f, "Blank expression"),
			Self::ParenthesisMismatch(open, close) => write!(f, "Open '{}' mismatched with close '{}'", open.get_symbol(), close.get_symbol()),
			Self::NoOperatorBase => write!(f, "No operator base"),
			Self::BinaryOperatorNotUsedOnExpressions => write!(f, "Binary operator used on non-expressions"),
			Self::InvalidPrefixOperatorSymbol(symbol) => write!(f, "Invalid prefix operator symbol base \"{}\"", symbol.get_symbol()),
			Self::InvalidInfixOperatorSymbol(symbol) => write!(f, "Invalid infix operator symbol base \"{}\"", symbol.get_symbol()),
			Self::OperatorUsedOnNothing => write!(f, "Operator used on nothing"),
			Self::FunctionParametersWithoutBody => write!(f, "Function parameters without body"),
			Self::UnterminatedCharLiteral => write!(f, "Unterminated char literal"),
			Self::EmptyCharLiteral => write!(f, "Empty char literal"),
			Self::NothingEscaped => write!(f, "Nothing escaped"),
			Self::InvalidEscapeSequence(sequence) => write!(f, "Invalid escape sequence \"{sequence}\""),
			Self::MultipleCharsInCharLiteral => write!(f, "Multiple chars in char literal"),
			Self::UnterminatedStringLiteral => write!(f, "Unterminated string literal"),
			Self::MetadataItemWithoutChildNode => write!(f, "Metadata item without child node"),
			Self::GlobalAugmentedOperator => write!(f, "Augmented operator used in global context"),
			Self::DiscardedGlobalFunctionCall => write!(f, "Discarded global function call"),
			Self::GlobalAssignmentToNonIdentifier => write!(f, "Global assignment to non-identifier"),
			Self::GlobalVariableConflict(name) => write!(f, "Re-assignment to global variable {name}"),
			Self::ExpectedIdentifier => write!(f, "Expected an identifier"),
			Self::InvalidDependency => write!(f, "Invalid or cyclic dependency"),
			Self::TooManyFunctionParameters => write!(f, "Too many function parameters"),
			Self::GlobalLValueAssignment => write!(f, "Global l-value assignment"),
			Self::LValueFunctionCall => write!(f, "L-value function call"),
			Self::LValueFunctionDefinition => write!(f, "L-value function definition"),
			Self::MultipleEntryPoints => write!(f, "Multiple entry points"),
			Self::TooManyFunctionArguments => write!(f, "Too many function arguments"),
			Self::InvalidTypeWidth => write!(f, "Invalid type width"),
			Self::UnableToWriteObject => write!(f, "Unable to write object"),
			Self::UnableToEmitObjectFile(error) => write!(f, "Unable to write object: {error}"),
			Self::CouldNotGetTarget(error) => write!(f, "Could not get target: {error}"),
			Self::InvalidArchitectureBitWidth(width) => write!(f, "Unsupported architecture, bit width of {width}, greater than 64"),
			Self::InvalidLValue => write!(f, "Invalid l-value"),
			Self::VoidParameter => write!(f, "Void parameter"),
			Self::DivisionByZero => write!(f, "Division by zero"),
			Self::ModuloByZero => write!(f, "Modulo by zero"),
			Self::NullPointerDereference => write!(f, "Null pointer dereference"),
			Self::InvalidBuiltInFunctionArgumentCount => write!(f, "Invalid built-in function argument count"),
			Self::ConstValueRequired => write!(f, "Const value required"),
			Self::InvalidTernaryOperator => write!(f, "Invalid ternary operator"),
			Self::UnmatchedTernary => write!(f, "Unmatched ternary operator"),
			Self::TernaryOperatorNotUsedOnExpressions => write!(f, "Ternary operator used on non-expressions"),
			Self::KeywordWithTwoChildren => write!(f, "Keyword with two children"),
			Self::GlobalOperatorNotConstEvaluated => write!(f, "Global operator not const-evaluated"),
			Self::NotUsedInsideLoop => write!(f, "Not used inside loop"),
			Self::InvalidExport => write!(f, "Invalid export"),
			Self::UnterminatedBlockComment => write!(f, "Unterminated block comment"),
			Self::ShouldNotHaveChild => write!(f, "Should not have child"),
			Self::InvalidSystemConstant => write!(f, "Invalid system constant"),
			Self::OnlyUsableInStandardLibrary => write!(f, "Only usable in standard library"),
			Self::InvalidFilepath => write!(f, "Invalid filepath"),
			Self::UnsupportedCPU(cpu) => write!(f, "Unsupported CPU: {cpu}"),
			Self::UnsupportedOS(os) => write!(f, "Unsupported OS: {os}"),
			Self::InvalidTargetTriplet(triplet) => write!(f, "Invalid target triplet: {triplet}"),
		}
	}
}